# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import raft_pb2 as raft__pb2


class CandidateFunctionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.vote_request = channel.unary_unary(
                '/raft.CandidateFunction/vote_request',
                request_serializer=raft__pb2.voter_details.SerializeToString,
                response_deserializer=raft__pb2.voter_response.FromString,
                )


class CandidateFunctionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def vote_request(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CandidateFunctionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'vote_request': grpc.unary_unary_rpc_method_handler(
                    servicer.vote_request,
                    request_deserializer=raft__pb2.voter_details.FromString,
                    response_serializer=raft__pb2.voter_response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raft.CandidateFunction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CandidateFunction(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def vote_request(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/raft.CandidateFunction/vote_request',
            raft__pb2.voter_details.SerializeToString,
            raft__pb2.voter_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ClientFunctionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.set_pair = channel.unary_unary(
                '/raft.ClientFunction/set_pair',
                request_serializer=raft__pb2.key_value.SerializeToString,
                response_deserializer=raft__pb2.server_response.FromString,
                )
        self.get_pair = channel.unary_unary(
                '/raft.ClientFunction/get_pair',
                request_serializer=raft__pb2.key.SerializeToString,
                response_deserializer=raft__pb2.server_response.FromString,
                )


class ClientFunctionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def set_pair(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_pair(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientFunctionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'set_pair': grpc.unary_unary_rpc_method_handler(
                    servicer.set_pair,
                    request_deserializer=raft__pb2.key_value.FromString,
                    response_serializer=raft__pb2.server_response.SerializeToString,
            ),
            'get_pair': grpc.unary_unary_rpc_method_handler(
                    servicer.get_pair,
                    request_deserializer=raft__pb2.key.FromString,
                    response_serializer=raft__pb2.server_response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raft.ClientFunction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClientFunction(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def set_pair(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/raft.ClientFunction/set_pair',
            raft__pb2.key_value.SerializeToString,
            raft__pb2.server_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_pair(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/raft.ClientFunction/get_pair',
            raft__pb2.key.SerializeToString,
            raft__pb2.server_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LeaderFunctionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.log_request = channel.unary_unary(
                '/raft.LeaderFunction/log_request',
                request_serializer=raft__pb2.leader_details.SerializeToString,
                response_deserializer=raft__pb2.log_response.FromString,
                )


class LeaderFunctionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def log_request(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LeaderFunctionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'log_request': grpc.unary_unary_rpc_method_handler(
                    servicer.log_request,
                    request_deserializer=raft__pb2.leader_details.FromString,
                    response_serializer=raft__pb2.log_response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raft.LeaderFunction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LeaderFunction(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def log_request(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/raft.LeaderFunction/log_request',
            raft__pb2.leader_details.SerializeToString,
            raft__pb2.log_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
